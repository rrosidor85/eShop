trigger:
  - main
pr:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  apphostProj: 'src/eShop.AppHost/eShop.AppHost.csproj'
  nugetCacheDir: '$(Pipeline.Workspace)/.nuget/packages'

steps:
  - task: UseDotNet@2
    displayName: 'Use .NET 9 SDK'
    inputs:
      version: '9.0.x'
      includePreviewVersions: false

  - bash: |
      echo "##vso[task.setvariable variable=DOTNET_CLI_TELEMETRY_OPTOUT]1"
      echo "##vso[task.setvariable variable=DOTNET_SKIP_FIRST_TIME_EXPERIENCE]1"
    displayName: 'Set CI env vars'

  # NuGet package cache (path MUST be a real value, not an undefined variable)
  - task: Cache@2
    displayName: 'Cache NuGet'
    inputs:
      key: 'nuget | $(Agent.OS) | **/*.csproj, **/*.props, **/*.targets, **/nuget.config'
      restoreKeys: 'nuget | $(Agent.OS)'
      path: '$(nugetCacheDir)'

  # Ensure the cache directory exists before restore
  - bash: |
      mkdir -p "$(nugetCacheDir)"
    displayName: 'Ensure cache dir'

  # Restore (write to the cache dir)
  - bash: |
      dotnet restore "$(apphostProj)"
    displayName: 'Restore'
    env:
      NUGET_PACKAGES: '$(nugetCacheDir)'

  # Build
  - bash: |
      dotnet build "$(apphostProj)" -c "$(buildConfiguration)" --no-restore
    displayName: 'Build'
    env:
      NUGET_PACKAGES: '$(nugetCacheDir)'

  # Test â€“ discover *Tests.csproj and run; skip if none
  - bash: |
      set -e
      echo "Searching for test projects..."
      mapfile -t projects < <(find . -type f -name "*Tests.csproj" -o -name "*.Tests.csproj")
      if [ ${#projects[@]} -eq 0 ]; then
        echo "No test projects found. Skipping dotnet test."
        exit 0
      fi
      echo "Found ${#projects[@]} test project(s):"
      printf ' - %s\n' "${projects[@]}"
      for proj in "${projects[@]}"; do
        echo "Running tests in: $proj"
        dotnet test "$proj" -c "$(buildConfiguration)" --no-build --verbosity normal
      done
    displayName: 'Test'
    env:
      NUGET_PACKAGES: '$(nugetCacheDir)'

  # Publish AppHost output as artifact
  - bash: |
      dotnet publish "$(apphostProj)" \
        -c "$(buildConfiguration)" \
        -o "$(Build.ArtifactStagingDirectory)/apphost"
    displayName: 'Publish AppHost'
    env:
      NUGET_PACKAGES: '$(nugetCacheDir)'

  - publish: $(Build.ArtifactStagingDirectory)
    artifact: drop
    displayName: 'Publish artifacts'
